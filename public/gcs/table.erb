---
title: "Table"
fragments:
  - "add_items"
---

<style>
  .grid-table {
    display: grid;
    gap: 1px;
    background-color: black;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(.25,.8,.25,1);
  }

  .grid-row {
    display: grid;
    width: 100%;
  }

  .grid-row .content-cell {
    background-color: #fff;
    padding: 15px;
    transition: all 0.3s;
    min-width: 100px;
    min-height: 20px;
  }

  .grid-row .content-cell:hover {
    background-color: #ddd;
    cursor: pointer;
  }

  .grid-row .header {
    background-color: black;
    color: #fff;
    font-size: 18px;
    cursor: default;
  }

  .grid-row .icon-column {
    background-color: #fff;
    padding: 10px;
    text-align: left;
    transition: all 0.3s;
    min-width: 50px;
    min-height: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .grid-row .icon-column:hover {
    background-color: #ddd;
    cursor: pointer;
  }

  .grid-table i {
    color: black;
    font-size: 1em;
  }

  #table-container {
    display: flex;
    flex-direction: column;
  }

  .grid-row > div {
    border-right: 1px solid #ccc;
  }

  .grid-row > div:last-child {
    border-right: none;
  }
</style>

<div id="table-container">
  <div class="grid-table rounded-shadow" id="results">
    <div class="grid-row" id="headers">
      <!-- The headers will be populated by JavaScript -->
      <div class="header icon-column"></div> <!-- Empty div for the icon column -->
    </div>
    <!-- Template row and content rows will be populated by JavaScript -->
    <div id="template-row" class="grid-row sortable-row" style="display: none;">
      <div class="icon-column drag-handle">
        <i class="fas fa-bars"></i>
      </div>
    </div>
  </div>
</div>

<script>
  var fieldsData;

  PubSub.subscribe(EVENTS.SEARCH_RESULTS, function(payload) {
    var resultsContainer = document.getElementById('results');
    if (resultsContainer && fieldsData) {
      renderResults(payload.results, resultsContainer, payload.searchTerm, fieldsData);
    } else {
      console.error('Results container not found in the DOM or fieldsData is not set');
    }
  });

  PubSub.subscribe(EVENTS.PAGE_CHANGED, async function(data) {
    const { collection } = data?.data;
    try {
      var response = await fetch(`/api/collection/collections?field=name&value=${collection}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      var collection_data = await response.json();
      fieldsData = collection_data.fields; // Update the shared fieldsData variable

      if (!Array.isArray(fieldsData)) {
        console.error('Expected fieldsData to be an array');
        return;
      }

      // Create a string for the 'grid-template-columns' style
      var gridColumnsValue = '100px ' + fieldsData.map(function() { return '1fr'; }).join(' ');
      var gridRows = document.querySelectorAll('.grid-row');
      gridRows.forEach(function(row) {
        row.style.gridTemplateColumns = gridColumnsValue;
      });

      var headersRow = document.getElementById('headers');
      headersRow.innerHTML = ''; // Clear existing headers

      // Add the icon header column
      var iconHeader = document.createElement('div');
      iconHeader.className = 'header';
      headersRow.appendChild(iconHeader);
      
      fieldsData.forEach(function(field) {
        var header = document.createElement('div');
        header.className = 'header';
        header.textContent = field.title || ''; // Using title or an empty string if title is undefined
        headersRow.appendChild(header);
      });

    } catch (error) {
      console.error('There has been a problem with your fetch operation:', error);
    }
  });
</script>
