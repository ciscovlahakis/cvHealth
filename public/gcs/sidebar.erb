<style>
  #sidebar {
    width: 20vw;
    height: 100vh;
    background-color: black;
    color: #fff;
    display: flex;
    padding-top: 5px;
    margin-top: calc(var(--padding)/2);
    flex-direction: column;
  }
  
  #sidebar .tab {
    display: flex;
    text-decoration: none;
    color: white;
    transition: background-color 0.3s;
    border: none;
    font-size: 14px;
    height: 32px;
    align-items: center;
    cursor: pointer;
    justify-content: flex-start;
  }

  #sidebar .tab:hover,
  #sidebar .tab.active {
    background-color: #343a40;
  }

  #sidebar .tab i {
    font-size: 1em;
    margin-right: 6px;
  }

  .dropdown .dropdown-toggle {
    cursor: pointer;
    display: flex;
    align-items: center;
  }
  
  .dropdown .dropdown-toggle .caret {
    margin-right: 6px;
    transition: transform 0.3s ease;
  }

  .dropdown .dropdown-menu {
    display: none;
    flex-direction: column;
  }

  .dropdown .dropdown-menu.show {
    display: flex;
  }

  #sidebar .tab.dropdown-item {
    padding-left: 27px;
  }

  #sidebar .tab.dropdown-toggle {
    padding-left: 10px;
  }
</style>

<div id="sidebar"></div>

<script>
  var sidebar = document.getElementById('sidebar');

  function shouldCreateDropdown(properties) {
    return (properties.pages && properties.pages.length > 0) ||
      (properties.fragments && properties.fragments.length > 0);
  }

  function createAnchorElement(textContent, href, className) {
    var anchor = document.createElement('a');
    anchor.className = className;
    anchor.textContent = textContent;
    anchor.href = href;
    return anchor;
  }

  function createToggle(properties) {
    var toggle = document.createElement('div');
    toggle.className = 'tab dropdown-toggle';
    toggle.id = 'dropdownMenu' + (properties.title || '').replace(/\s+/g, '');
    toggle.setAttribute('data-toggle', 'dropdown');
    toggle.setAttribute('aria-haspopup', 'true');
    toggle.setAttribute('aria-expanded', 'false');
    toggle.innerHTML = '<span class="caret">&#9660;</span> ' + properties.title;
    return toggle;
  }

  function createMenu(toggleId) {
    var menu = document.createElement('div');
    menu.className = 'dropdown-menu show';
    menu.setAttribute('aria-labelledby', toggleId);
    return menu;
  }

  // Existing function to create a dropdown component (slightly modified)
  function createDropdownComponent(properties) {
    var dropdown = document.createElement('div');
    dropdown.className = 'dropdown';

    var toggle = createToggle(properties);
    var menu = createMenu(toggle.id);

    // Append the Home tab if a route is provided
    if (properties.route) {
      var homeTab = createAnchorElement("Home", properties.route, 'dropdown-item tab');
      menu.prepend(homeTab);
    }

    // Process and append routes to the menu
    if (properties.pages && properties.pages.length > 0) {
      properties.pages.forEach(function(route) {
        if (!route) return;
        fetch(`/api/collection/pages?field=route&value=${route}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            var menuItem = createAnchorElement(
              data.title || "Resource Not Found",
              `/${route}`,
              'dropdown-item tab'
            );
            menu.appendChild(menuItem);
          })
          .catch(error => {
            console.error('There has been a problem with your fetch operation:', error);
          });
      });
    }

    // Process and append hashes to the menu
    if (properties.fragments && properties.fragments.length > 0) {
      properties.fragments.forEach(function(fragmentHash) {
        var fragment = fragmentsData[fragmentHash];
        if (!fragment) return;
        var menuItem = createAnchorElement(
          fragment.title || "Resource Not Found",
          `#${fragmentHash}`,
          'dropdown-item tab'
        );
        menu.appendChild(menuItem);
        menuItem.addEventListener('click', function(event) {
          event.preventDefault();
          window.location.hash = fragmentHash;
        });
      });
    }

    dropdown.appendChild(toggle);
    dropdown.appendChild(menu);

    toggle.addEventListener('click', function() {
      menu.classList.toggle('show');
      toggle.querySelector('.caret').textContent = menu.classList.contains('show') ? '\u25BC' : '\u25B6';
    });

    return dropdown;
  }

  function updateDomElement(action, domElement, item) {
    switch (action) {
      case 'create':
        var dropdown = createDropdownComponent(item);
        domElement.appendChild(dropdown);
        break;
      case 'update':
        // Find the existing element and update it
        const existingItemElement = domElement.querySelector(`#item-${item.id}`);
        if (existingItemElement) {
          // Assuming updateItemElement is a function that updates the DOM element for the item
          updateItemElement(existingItemElement, item);
        }
        break;
      case 'delete':
        // Remove the item element from the DOM
        const itemToRemove = domElement.querySelector(`#item-${item.id}`);
        if (itemToRemove) {
          domElement.removeChild(itemToRemove);
        }
        break;
      default:
        console.error(`Unsupported action: ${action}`);
    }
  }

  var isPageReady = false;
  var queuedComponentChanges = [];

  // Subscribe to page changes
  PubSub.subscribe(EVENTS.PAGE_SINGULAR_CHANGED, ({ action, data }) => {
    updateDomElement(action, sidebar, data);
    isPageReady = true;

    // Process any queued component changes
    queuedComponentChanges.forEach(function(change) {
      updateDomElement(change.action, sidebar, change.data);
    });

    queuedComponentChanges = []; // Clear the queue
  });

  // Subscribe to component changes
  PubSub.subscribe(EVENTS.COMPONENT_SINGULAR_CHANGED, ({ action, data }) => {
    if (!isPageReady) {
      // Queue the component change if the page isn't ready yet
      queuedComponentChanges.push({ action, data });
    } else {
      // Otherwise, handle the component change immediately
      updateDomElement(action, sidebar, data);
    }
  });
</script>
