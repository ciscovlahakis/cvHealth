<style>
  #header {
    padding-left: calc(var(--padding) /2);
    padding-right: calc(var(--padding) /2);
    margin-top: calc(var(--padding) /2);
    margin-bottom: calc(var(--padding) /2);
  }

  .search-bar {
    display: flex;
  }

  .breadcrumb-container {
    display: flex;
    gap: calc(var(--padding) /2);
    margin-right: calc(var(--padding) /2);
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    padding: 10px 20px;
    border: none;
    background-color: white;
    color: black;
    border-radius: 15px;
    font-size: 1rem;
    box-shadow: 0 4px 6px 0 hsla(0, 0%, 0%, 0.2);
  }

  .search-bar input {
    flex: 1;
    border: none;
    padding: 10px;
    outline: none;
    border-radius: 15px;
    font-size: 1rem;
    box-shadow: 0 4px 6px 0 hsla(0, 0%, 0%, 0.2);
  }

  .breadcrumb img,
  .breadcrumb-thumbnail {
    width: 25px;
    height: 25px;
    border-radius: 50%;
  }

  .breadcrumb-thumbnail-with-title {
    margin-right: 5px;
  }

  .breadcrumb-icon {
    font-size: 1.5em;
    line-height: 1;
    display: inline-block;
    vertical-align: middle; /* Align the icon with the text */
  }

  .breadcrumb-icon-with-title {
    margin-right: 7px;
  }

  .breadcrumb a,
  .clickable {
    color: inherit;
    text-decoration: none;
  }

  .breadcrumb-content {
    display: inline-flex;
    align-items: center;
    justify-content: center; /* Add this to center the items vertically */
  }

  a:hover .breadcrumb {
    background-color: #f5f5f5; /* Light grey background */
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); /* Slightly elevated look */
    transition: all 0.3s cubic-bezier(.25,.8,.25,1); /* Smooth transition */
  }

  #activityIndicator {
    display: none;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: var(--zindex-activity-indicator);
  }
  
  .spinner {
    border: 8px solid #f3f3f3;
    border-top: 8px solid #000000;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 2s linear infinite;
  }
</style>

<div id="header">
  <div class="search-bar">
    <div class="breadcrumb-container" id="breadcrumbs"></div>
    <input type="search" name="search" placeholder="Search...">
  </div>
  <div id="activityIndicator">
    <div class="spinner"></div>
  </div>
</div>

<script>
  function initializeHeader(dataParentId) {
    var searchInput = document.querySelector("input[name='search']");
    var activityIndicator = document.getElementById('activityIndicator');
    var indexName;

    // Function to set up the search input event listener
    function setUpSearch() {
      searchInput.addEventListener("keyup", function(event) {
        var searchTerm = event.target.value.trim();
        if (indexName && indexName.trim() !== '') {
          var url = "/search/" + indexName + (searchTerm ? "?term=" + encodeURIComponent(searchTerm) : "");
          performSearch(url, searchTerm);
        } else {
          console.error("indexName is not set correctly in the JavaScript code.");
        }
      });
    }

    // Function to perform the initial fetch of search results
    function initialSearch() {
      if (indexName && indexName.trim() !== '') {
        performSearch("/search/" + indexName, "");
      } else {
        console.error("indexName is not set correctly in the JavaScript code.");
      }
    }

    async function build_breadcrumbs(route, page_data) {
      var route_components = route === "/" ? [""] : ["/"].concat(route.split("/").slice(1));
      var breadcrumbs = [];

      for (var index = 0; index < route_components.length; index++) {
        var component = route_components[index];
        var breadcrumb_route = route_components.slice(0, index + 1).join("/") || "/";
        
        var breadcrumb_page_data = null;
        if (component === page_data.route) {
            breadcrumb_page_data = page_data;
        } else {
          try {
            var response = await fetch(`/api/collection/pages?field=route&value=${breadcrumb_route}`);
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            breadcrumb_page_data = await response.json();
          } catch (error) {
            console.error('There has been a problem with your fetch operation:', error);
          }
        }
        if (breadcrumb_page_data) {
          const { title, icon, img_src, route } = breadcrumb_page_data;
          breadcrumbs.push({ title, icon, img_src, route });
        }
      }
      
      return breadcrumbs;
    }

    async function updateBreadcrumbs(data) {
      var breadcrumbs = await build_breadcrumbs(window.location.pathname, data);
      var breadcrumbContainer = document.getElementById('breadcrumbs');
      breadcrumbContainer.innerHTML = ''; // Clear existing breadcrumbs

      breadcrumbs.forEach(function(breadcrumb) {
        var breadcrumbElement = document.createElement('a');
        breadcrumbElement.href = breadcrumb.route || '/';
        breadcrumbElement.className = 'clickable';
        
        var breadcrumbContent = document.createElement('span');
        breadcrumbContent.className = 'breadcrumb breadcrumb-content';

        const { title, icon, img_src } = breadcrumb;
        
        // Check if the breadcrumb has an image source
        if (img_src) {
          var img = document.createElement('img');
          img.src = img_src;
          img.alt = 'Thumbnail';
          img.className = 'breadcrumb-thumbnail';
          if (title) {
            img.className += ' breadcrumb-thumbnail-with-title';
          }
          breadcrumbContent.appendChild(img);
        }
        // If not, check if the breadcrumb has an icon class
        else if (icon) {
          var iconElement = document.createElement('i');
          iconElement.className = icon + ' breadcrumb-icon';
          if (title) {
              iconElement.className += ' breadcrumb-icon-with-title';
          }
          breadcrumbContent.appendChild(iconElement);
        }
        // If no image or icon, use a placeholder image
        else {
          var placeholderImg = document.createElement('img');
          placeholderImg.src = 'https://via.placeholder.com/150';
          placeholderImg.alt = '';
          placeholderImg.className = 'breadcrumb-thumbnail';
          if (title) {
            placeholderImg.className += ' breadcrumb-thumbnail-with-title';
          }
          breadcrumbContent.appendChild(placeholderImg);
        }
        
        // Check if the breadcrumb has a title
        if (title) {
          var titleElement = document.createElement('span');
          titleElement.textContent = title;
          breadcrumbContent.appendChild(titleElement);
        }
        
        // Append the breadcrumb content to the breadcrumb element
        breadcrumbElement.appendChild(breadcrumbContent);
        // Append the breadcrumb element to the container
        breadcrumbContainer.appendChild(breadcrumbElement);
      });
    }

    PubSub.subscribe(dataParentId, async function(data) {
      var collection = data?.page?.data?.collection;
      if (!collection) return;
      indexName = collection;
      setUpSearch();
      initialSearch();
      await updateBreadcrumbs(data);
    });
  }

  var headerElements = document.querySelectorAll('[id*="header"]');
  headerElements.forEach(function(element) {
    var dataParentId = element.dataset.parentId;
    initializeHeader(dataParentId, element);
  });
</script>
