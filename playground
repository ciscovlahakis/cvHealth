fragments:
  - "add_items"
  - "edit_items"
  - "delete_items"
  - "order_items"
  - "enable_pagination"
  - "switch_to_list"



// Subscribe to parent id;
var parentId = "page_random_id";

// Get collection, then fields
var collection = data?.collection;

// Publish fields and collection
var id = "table_random_id";
PubSub.publish(parentId, {
  action: 'create',
  data: {
    "fields": fieldsData,
    "collection": collection,
    // Pass clicked table row
  }
});



<div class="sidebar-heading text-center">
  <a href="<%= route %>" class="clickable-tab sidebar-tab">
    <% if !img_src.empty? %>
      <img src="<%= img_src %>" alt="Logo" class="logo-thumbnail">
    <% elsif !icon.empty? %>
      <i class="<%= icon %>"></i>
    <% else %>
      <img src="https://via.placeholder.com/150" alt="Placeholder" class="logo-thumbnail">
    <% end %>
  </a>
</div>


<div style="display: flex;">
  <div>
    <h2 style="margin-bottom: 0;"><%= @title %></h2>
    <% if @description && !@description.empty? %>
      <p class="description" style="margin-top: 1;"><%= @description %></p>
    <% end %>
  </div>
</div>

<div class="modal" id="modal">
  <div class="modal-content">
    <h2 id="modal-title"><%= @create_title %></h2>
    <div class="form-container">
      <form id="modal-form" class="<%= @resource %>-form" action="" method="post">
        <input type="hidden" name="id" value="">
        <% Array(@columns).each do |column| %>
          <label for="<%= column[:id] %>"><%= column[:name] %>:</label>
          <% if column[:type] == Integer %>
            <input type="number" id="<%= column[:id] %>" name="<%= column[:id] %>">
          <% else %>
            <input type="text" id="<%= column[:id] %>" name="<%= column[:id] %>">
          <% end %>
        <% end %>

        <%= recurrence %>

        <div class="button-group">
          <button type="button" id="cancel-button">Cancel</button>
          <input type="submit" value="Create">
        </div>
      </form>
    </div>
  </div>
</div>

window.firebaseInitialized.then(() => {
  renderSidebar();
}).catch(error => {
  console.error('Error during Firebase initialization:', error);
});
































<!-- <div id="menuContainer">
  <% Array(links).each do |link| %>
    <a href="/<%= link.fetch(:path,'') %>" class="list-group-item sidebar-link">
      <i class="<%= link.fetch(:icon,'') %>"></i>
      <%= link.fetch(:title,'') %>
    </a>
  <% end %>
</div> -->

# sidebar_link_hash = SIDEBAR_LINKS.fetch(path, { :title => "", :icon => "", :description => "", :enable_move => false, :create_title => false })
    # @title = sidebar_link_hash.fetch(:title, "")
    # @icon = sidebar_link_hash.fetch(:icon, "")
    # @description = sidebar_link_hash.fetch(:description, "")
    # @enable_move = sidebar_link_hash.fetch(:enable_move, false)
    # if sidebar_link_hash.fetch(:create_title, false)
    #   @create_title = "Create #{@title.chop}"
    # end
    # @columns = columns


    document.addEventListener('DOMContentLoaded', (event) => {
  const currentPath = window.location.pathname;
  const sidebarLinks = document.querySelectorAll('.sidebar-link');

  sidebarLinks.forEach((link) => {
    link.classList.remove('active');  // Remove this line
    if (link.getAttribute('href') === currentPath) {
      link.classList.add('active');
    }
  });

  document.getElementById('adminMenuCheckbox').addEventListener('change', function (e) {
    switchMenu(e.target.checked);
  });
  
  function switchMenu(isAdmin) {
    var menuContainer = document.getElementById('menuContainer');
    menuContainer.innerHTML = '';
    var links = isAdmin ? ADMIN_LINKS : SIDEBAR_LINKS;
    for (var path in links) {
      var details = links[path];
      var a = document.createElement('a');
      a.href = '/' + path;
      a.className = 'list-group-item list-group-item-action bg-dark text-white sidebar-link';
      if (a.getAttribute('href') === currentPath) { // Add this line
        a.classList.add('active');
      }
      a.innerHTML = '<i class="' + details.icon + '"></i>' + details.title;
      menuContainer.appendChild(a);
    }
  }
  
  var SIDEBAR_LINKS = JSON.parse(document.getElementById('sidebar-container').dataset.sidebarLinks);
  var ADMIN_LINKS = JSON.parse(document.getElementById('sidebar-container').dataset.adminLinks);

});

firestore
    .collection("collections")
    .get()
    .then((snapshot) => {
      snapshot.forEach((doc) => {
        const collectionName = doc.id;

        exports[`index${collectionName}OnCreate`] = functions.firestore
            .document(`${collectionName}/{documentId}`)
            .onCreate((snap, context) =>
              indexDocument(collectionName, snap, context),
            );

        exports[`index${collectionName}OnUpdate`] = functions.firestore
            .document(`${collectionName}/{documentId}`)
            .onUpdate((change, context) =>
              indexDocument(collectionName, change.after, context),
            );

        exports[`unindex${collectionName}OnDelete`] = functions.firestore
            .document(`${collectionName}/{documentId}`)
            .onDelete((snap, context) =>
              unindexDocument(collectionName, context));
      });
    })
    .catch((err) => {
      console.log("Error getting documents", err);
    });

get "/meal-plan" do
  @meal_plan = MealPlanGenerator.new(@current_user).generate
  erb :meal_plan
end

# def render_page(path, columns)
#   ref = $db.col(path)
#   @data = get_data(ref, path)
#   erb :"shared/page"
# end

# def get_data(ref, resource)
#   output = []
#   ref.get do |doc|
#     data = doc.data
#     data_with_id = data.merge({ "id" => doc.document_id })
#     string_data = data_with_id.transform_keys(&:to_s) # Convert all keys to Strings
#     output << string_data
#   end

#   # Sort the output array based on the 'position' field
#   output = output.sort_by { |item| item.fetch("position", 0) }
#   return output
# end

# get "/:resource" do
#   resource, attributes = resource_and_attributes()
#   render_page(resource, attributes)
# end
