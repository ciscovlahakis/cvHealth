<% page_data = defined?(page_data) && !page_data.nil? ? page_data : {} %>
<% resource_properties = defined?(resource_properties) && !resource_properties.nil? ? resource_properties : {} %>
<% fragments_data = defined?(fragments_data) && !fragments_data.nil? ? fragments_data : {} %>

<style>
  #sidebar {
    width: 20vw;
    height: 100vh;
    background-color: black;
    color: #fff;
    display: flex;
    padding-top: 5px;
    flex-direction: column;
  }
  
  #sidebar .tab {
    display: flex;
    text-decoration: none;
    color: white;
    transition: background-color 0.3s;
    border: none;
    font-size: 14px;
    height: 32px;
    align-items: center;
    cursor: pointer;
    justify-content: flex-start;
  }

  #sidebar .tab:hover,
  #sidebar .tab.active {
    background-color: #343a40;
  }

  #sidebar .tab i {
    font-size: 1em;
    margin-right: 6px;
  }

  .dropdown .dropdown-toggle {
    cursor: pointer;
    display: flex;
    align-items: center;
  }
  
  .dropdown .dropdown-toggle .caret {
    margin-right: 6px;
    transition: transform 0.3s ease;
  }

  .dropdown .dropdown-menu {
    display: none;
    flex-direction: column;
  }

  .dropdown .dropdown-menu.show {
    display: flex;
  }

  #sidebar .tab.dropdown-item {
    padding-left: 27px;
  }

  #sidebar .tab.dropdown-toggle {
    padding-left: 10px;
  }
</style>

<div id="sidebar"></div>

<script>
  // Object to store the HTML content of fragments provided by the server
  var fragmentsData = <%= fragments_data.to_json %>;

  function fetchDataFromCollection(collectionName, field, operator, value) {
    return window.db.collection(collectionName).where(field, operator, value).get()
      .then(function(querySnapshot) {
        var data = querySnapshot.docs.map(function(doc) {
          return doc.data();
        });
        return data.length > 0 ? data[0] : {};
      })
      .catch(function(error) {
        console.error("Error getting documents: ", error);
      });
  }

  function shouldCreateDropdown(properties) {
    return (properties.pages && properties.pages.length > 0) ||
      (properties.fragments && properties.fragments.length > 0);
  }

  function createAnchorElement(textContent, href, className) {
    var anchor = document.createElement('a');
    anchor.className = className;
    anchor.textContent = textContent;
    anchor.href = href;
    return anchor;
  }

  function createToggle(properties) {
    var toggle = document.createElement('div');
    toggle.className = 'tab dropdown-toggle';
    toggle.id = 'dropdownMenu' + (properties.title || '').replace(/\s+/g, '');
    toggle.setAttribute('data-toggle', 'dropdown');
    toggle.setAttribute('aria-haspopup', 'true');
    toggle.setAttribute('aria-expanded', 'false');
    toggle.innerHTML = '<span class="caret">&#9660;</span> ' + properties.title;
    return toggle;
  }

  function createMenu(toggleId) {
    var menu = document.createElement('div');
    menu.className = 'dropdown-menu show';
    menu.setAttribute('aria-labelledby', toggleId);
    return menu;
  }

  // Existing function to create a dropdown component (slightly modified)
  function createDropdownComponent(properties) {
    var dropdown = document.createElement('div');
    dropdown.className = 'dropdown';

    var toggle = createToggle(properties);
    var menu = createMenu(toggle.id);

    // Append the Home tab if a route is provided
    if (properties.route) {
      var homeTab = createAnchorElement("Home", properties.route, 'dropdown-item tab');
      menu.prepend(homeTab);
    }

    // Process and append routes to the menu
    if (properties.pages && properties.pages.length > 0) {
      properties.pages.forEach(function(route) {
        if (!route) return;
        fetchDataFromCollection("pages", "route", "==", route).then(function(page) {
          var menuItem = createAnchorElement(
            page.title || "Resource Not Found",
            `/${route}`,
            'dropdown-item tab'
          );
          menu.appendChild(menuItem);
        });
      });
    }

    // Process and append hashes to the menu
    if (properties.fragments && properties.fragments.length > 0) {
      properties.fragments.forEach(function(fragmentHash) {
        var fragment = fragmentsData[fragmentHash];
        if (!fragment) return;
        var menuItem = createAnchorElement(
          fragment.title || "Resource Not Found",
          `#${fragmentHash}`,
          'dropdown-item tab'
        );
        menu.appendChild(menuItem);
        menuItem.addEventListener('click', function() {
          renderFragmentByHash(fragmentHash);
        });
      });
    }

    dropdown.appendChild(toggle);
    dropdown.appendChild(menu);

    toggle.addEventListener('click', function() {
      menu.classList.toggle('show');
      toggle.querySelector('.caret').textContent = menu.classList.contains('show') ? '\u25BC' : '\u25B6';
    });

    return dropdown;
  }

  // Function to render a fragment based on its hash (file name)
  function renderFragmentByHash(hash) {
    var fragment = fragmentsData[hash];
    if (fragment && fragment.content) {
      var fragmentElement = document.getElementById('_fragment');
      if (!fragmentElement) return;
      fragmentElement.innerHTML = fragment.content;
    } else {
      console.error("Fragment not found for hash: " + hash);
    }
  }

  // Function to initialize the sidebar with fetched fragments and routes
  function initializeSidebar() {
    var sidebar = document.getElementById('sidebar');
    var pageData = <%= page_data.to_json %>;
    var resourceProperties = <%= resource_properties.to_json %>;

    if (shouldCreateDropdown(pageData)) {
      var dropdown = createDropdownComponent(pageData);
      sidebar.appendChild(dropdown);
    }

    Object.keys(resourceProperties).forEach(function(component_name) {
      var properties = resourceProperties[component_name];
      if (shouldCreateDropdown(properties)) {
        var dropdown = createDropdownComponent(properties);
        sidebar.appendChild(dropdown);
      }
    });

    // Check for an initial hash when the page loads
    if (window.location.hash) {
      renderFragmentByHash(window.location.hash.substring(1));
    }
  }

  // Event listener for hash changes
  window.onhashchange = function() {
    // Decode the hash to handle URL encoding
    var decodedHash = decodeURIComponent(window.location.hash.substring(1)); // Remove the '#' prefix
    renderFragmentByHash(decodedHash);
  };

  // Initialize the sidebar after the DOM is fully loaded
  window.firebaseInitialized
    .then(initializeSidebar).
    catch(function(error) {
      console.error('Error during Firebase initialization:', error);
    });
</script>
