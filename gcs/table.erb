---
- __props__:
    columns: Array
    enable_move: Boolean
- recurrence
---
<style>
  .grid-table {
    display: grid;
    gap: 1px;
    background-color: black;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(.25,.8,.25,1);
  }

.grid-row {
  display: grid;
  grid-template-columns: <%= "repeat(#{columns.count}, 1fr) 100px;" %>;
  width: 100%;
}

  .grid-row .content-cell {
    background-color: #fff;
    padding: 10px;
    text-align: center;
    transition: all 0.3s;
    min-width: 100px; /* adjust based on your needs */
    min-height: 50px; /* adjust based on your needs */
  }

  .grid-row .content-cell:hover {
    background-color: #ddd;
    cursor: pointer;
  }

  .grid-row .header {
    text-align: center;
    padding: 10px; /* adjust based on your needs */
    background-color: black;
    color: #fff;
    font-size: 18px;
    cursor: default;
  }

  .grid-row .icon-column {
    background-color: #fff;
    padding: 10px;
    text-align: left;
    transition: all 0.3s;
    min-width: 50px; /* adjust based on your needs */
    min-height: 50px; /* adjust based on your needs */
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .grid-row .icon-column:hover {
    background-color: #ddd;
    cursor: pointer;
  }

  .grid-table i {
    color: black;
    font-size: 1.2em;
    margin: 0 10px;
  }

  .grid-table button {
    border: none;
    padding: 0;
    background: none;
  }

  #button-table-container {
    display: flex;
    flex-direction: column;
  }

  .table-button {
    align-self: flex-end;
  }

  .grid-row > div {
    border-right: 1px solid #ccc;
  }

  .grid-row > div:last-child {
    border-right: none;
  }
</style>

<% unless columns.empty? %>
  <div id="button-table-container" data-columns="<%= CGI.escapeHTML(columns.to_json) %>">
    <input type="hidden" id="enableMove" value="<%= enable_move %>">
    <div class="grid-table rounded-shadow" id="results">
      <div class="grid-row" id="headers">
        <% columns.each do |x| %>
          <div class="header"><%= x&.fetch(:title, nil) %></div>
        <% end %>
        <div class="header" />
      </div>
      <div id="template-row" class="grid-row sortable-row" style="display: none;">
        <div class="icon-column drag-handle">
          <i class="fas fa-bars"></i>
        </div>
      </div>
    </div>
  </div>
<% end %>

<script>
  function createRowWithData(data) {
    var row = document.createElement('div');
    row.className = 'grid-row sortable-row';
    row.dataset.resource = data.resource;
    row.dataset.id = data.objectID; /* Use Algolia's objectID as the row identifier */

    /* Create a cell for each column in the columns array. The columns JSON is already safe to parse. */
    var columnsJson = document.getElementById('button-table-container').dataset.columns;
    var columns = JSON.parse(columnsJson);

    columns.forEach(function(column) {
      var cell = document.createElement('div');
      cell.className = 'content-cell';
      /* Directly use the column title as the property name to access Algolia data */
      var cellValue = data[column.title.toLowerCase()];
      cell.dataset.id = data.objectID;
      cell.textContent = cellValue || '';
      row.appendChild(cell);
    });

    /* Add the icon column for the drag handle */
    var iconColumn = document.createElement('div');
    iconColumn.className = 'icon-column drag-handle';
    iconColumn.innerHTML = '<i class="fas fa-bars"></i>';
    row.appendChild(iconColumn);

    return row;
  }

  function renderResults(data, container, searchTerm) {
    renderDataOrNoResults(data, container, searchTerm, createRowWithData, createNoResultsElement);
  }
</script>
